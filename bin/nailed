#!/usr/bin/env ruby

require 'trollop'
require_relative "../lib/nailed"

opts = Trollop.options do
  opt :new, "Create new database", short: "n"
  opt :migrate, "Migrate/Upgrade database", short: "m"
  opt :bugzilla, "Refresh bugzilla database records", short: "b"
  opt :github, "Refresh github database records", short: "g"
  opt :gitlab, "Refresh gitlab database records", short: "G"
  opt :list, "List github repositories within organization", type: :string, short: "l"
  opt :server, "Start a dashboard webinterface", short: "s"
end

abort("try nailed -h") if opts.all? { |_k, v| v.is_a?(FalseClass) }

if opts[:server_given]
  path_to_sinatra_server = File.join(File.dirname(__FILE__), "..", "app.rb")
  exec path_to_sinatra_server
end

opts.each_pair do |key, val|
  case key
  when :new
    if val
      require_relative "../db/migrate/create_new_db.rb"
      newDB
      Nailed.logger.info("Created new database. DB_ID: #{$CURRENT_DB_ID}")
    end
  when :migrate
    if val
      require_relative "../db/migrate/migrate.rb"
      migrateDB
      Nailed.logger.info("Database tables are up-to-date")
    end
  when :bugzilla
    if val
      require_relative "../lib/nailed/bugzilla"
      bugzilla_client = Nailed::Bugzilla.new
      bugzilla_client.get_bugs
      bugzilla_client.remove_stale_bugs
      bugzilla_client.write_bugtrends
      bugzilla_client.write_allbugtrends
      bugzilla_client.write_l3trends
    end
  when :github
    if val
      require_relative "../lib/nailed/github"
      github_client = Nailed::Github.new
      github_client.get_pull_requests
      github_client.write_allpulltrends
    end
  when :gitlab
    if val
      require_relative "../lib/nailed/gitlab"
      gitlab_client = Nailed::Gitlab.new
      gitlab_client.get_merge_requests
      gitlab_client.write_allmergetrends
    end
  when :list
    if val
      begin
        require_relative "../lib/nailed/github"
        github_client = Nailed::Github.new
        Nailed.list_org_repos(github_client.client, val)
      rescue
      end
    end
  end
end
